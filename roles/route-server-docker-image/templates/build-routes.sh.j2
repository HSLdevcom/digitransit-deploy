#!/bin/bash
set -e
set -x
set -o pipefail

# Basic authentication tokens
MATKA_PASS={{matka_basic_auth}}
HSL_PASS={{hsl_basic_auth}}

# Base locations
ROOT={{route_server_root}}
FIT_GTFS=${ROOT}/gtfs_shape_mapfit/fit_gtfs.bash
OBA_GTFS=${ROOT}/one-busaway-gtfs-transformer/onebusaway-gtfs-transformer-cli.jar
OTP_JAR={{otp_root}}/target/otp-0.20.0-SNAPSHOT-shaded.jar

# Ensure data location
mkdir -p ${ROOT}/finland

function retrieveOSM() {
  echo "Retrieving OSM data..."
  cd ${ROOT}/finland
  curl -sS "{{route_server_data_osm}}" -o finland-latest.osm.pbf
}

function retrieveTampere() {
  echo "Retrieving Tampere data..."
  cd ${ROOT}/finland
  curl -sS "{{route_server_data_tampere}}" -o tampere.zip
  $FIT_GTFS finland-latest.osm.pbf +init=epsg:3067 tampere.zip tampere_fitted.zip 2>&1 | tee tampere.fit.log.txt
  mv tampere_fitted.zip tampere.zip
}

function retrieveJyvaskyla() {
  echo "Retrieving Jyväskylä data..."
  cd ${ROOT}/finland
  curl -sS "{{route_server_data_jyvaskyla}}" -o jyvaskyla.zip
}

function retrieveOulu() {
  echo "Retrieving Oulu data..."
  cd ${ROOT}/finland
  curl -sS "{{route_server_data_oulu}}" -o oulu.zip
}

function retrieveLauttaNet() {
  echo "Retrieving Lautta.net data..."
  cd ${ROOT}/finland
  curl -sS "{{route_server_data_lautta}}" -o lautta.zip
}

function retrieveHsl() {
  echo "Retrieving HSL data..."
  cd ${ROOT}/finland
  curl -sS --user $HSL_PASS "{{route_server_data_hsl}}" -o hsl.zip

  unzip -o hsl.zip stop_times.txt stops.txt
  # TODO: Check that the line is in expected format
  # Needed in order to get rid of shape_travelled
  cut --complement -f 9 -d, stop_times.txt > stop_times.new
  mv stop_times.new stop_times.txt
  # TODO: Get stop positions from jore data
  # TODO: make shapes nicer
  #./fix_stops_accessibility.py > stops.new
  #mv stops.new stops.txt
  zip -f hsl.zip stop_times.txt stops.txt
  rm stop_times.txt
  rm stops.txt

  $FIT_GTFS finland-latest.osm.pbf +init=epsg:3067 hsl.zip hsl_fitted.zip 2>&1 | tee hsl.fit.log.txt
  mv hsl_fitted.zip hsl.zip
}

function retrieveKoontikanta() {
  echo "Retrieving Koontikanta data..."
  cd ${ROOT}/finland

  curl -sS -u "$MATKA_PASS" "{{route_server_data_matka}}" -o matka.zip

  rm -rf GTFS
  mkdir -p GTFS

  transformKoontikantaPart "java -server -Xmx8G -jar $OBA_GTFS --transform=${ROOT}/rules/matka.rule matka.zip GTFS/matka.tmp"
  # rename id's as a separate pass to avoid nondeterminism
  transformKoontikantaPart "java -server -Xmx8G -jar $OBA_GTFS --transform=${ROOT}/rules/matka-id.rule GTFS/matka.tmp GTFS/matka"
  sed -i -e '1 a''MATKA,matka.fi,http://www.matka.fi/,Europe/Helsinki,' GTFS/matka/agency.txt

  cd GTFS/matka
  zip ../../matka.filtered.zip *
  cd ../..

  mv matka.filtered.zip matka.zip
}

# One Bus away transform does not end terminate with a correct error code. Check that here and fail if configuration is set
function transformKoontikantaPart() {
  if (! $1 2>&1) | grep "Exception"
  then
    echo "Failed to transform koontikanta part"
    {% if route_server_fail_build_on_data_error %}
      exit 1
    {% endif %}
  fi
}

function buildOtpGraph() {
  echo "Building OTP graph..."
  cd $ROOT
  cp {{otp_root}}/build-config.json ${ROOT}/finland/build-config.json
  java -Xmx8G -jar $OTP_JAR --build finland/ 2>&1 | tee ${ROOT}/finland/Graph.build.log.txt
}

# Here we go
retrieveOSM
retrieveTampere
retrieveJyvaskyla
retrieveOulu
retrieveLauttaNet
retrieveHsl
retrieveKoontikanta
buildOtpGraph
