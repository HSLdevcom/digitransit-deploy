#!/bin/bash
set -e
set -x
set -o pipefail

# Basic authentication tokens
MATKA_PASS={{matka_basic_auth}}
HSL_PASS={{hsl_basic_auth}}

# Base locations
ROOT={{route_server_root}}
FIT_GTFS=${ROOT}/gtfs_shape_mapfit/fit_gtfs.bash
OBA_GTFS=${ROOT}/one-busaway-gtfs-transformer/onebusaway-gtfs-transformer-cli.jar
OTP_JAR={{otp_root}}/target/otp-0.20.0-SNAPSHOT-shaded.jar

# Ensure data location
mkdir -p ${ROOT}/finland
mkdir -p ${ROOT}/hsl

function retrieveOSMFinland() {
  echo "Retrieving OSM data..."
  cd ${ROOT}/finland
  curl -sS "{{route_server_data_osm_finland}}" -o finland-latest.osm.pbf
}

function retrieveOSMHSL() {
  echo "Retrieving OSM data..."
  cd ${ROOT}/hsl
  curl -sS "{{route_server_data_osm_hsl}}" -o helsinki_finland.osm.pbf
}

function retrieveTampere() {
  echo "Retrieving Tampere data..."
  cd ${ROOT}/finland
  curl -sS "{{route_server_data_tampere}}" -o tampere.zip
  $FIT_GTFS finland-latest.osm.pbf +init=epsg:3067 tampere.zip tampere_fitted.zip 2>&1 | tee tampere.fit.log.txt
  mv tampere_fitted.zip tampere.zip
  add_feed_id tampere.zip JOLI
}

function retrieveJyvaskyla() {
  echo "Retrieving Jyväskylä data..."
  cd ${ROOT}/finland
  curl -sS "{{route_server_data_jyvaskyla}}" -o jyvaskyla.zip
#  add_feed_id jyvaskyla.zip JY
}

function retrieveOulu() {
  echo "Retrieving Oulu data..."
  cd ${ROOT}/finland
  curl -sS "{{route_server_data_oulu}}" -o oulu.zip
  add_feed_id oulu.zip 7317
}

function retrieveLauttaNet() {
  echo "Retrieving Lautta.net data..."
  cd ${ROOT}/finland
  curl -sS "{{route_server_data_lautta}}" -o lautta.zip
#  add_feed_id lautta.zip NNN
}

function retrieveHsl() {
  echo "Retrieving HSL data..."
  cd ${ROOT}/finland
  curl -sS --user $HSL_PASS "{{route_server_data_hsl}}" -o hsl.zip

  unzip -o hsl.zip stop_times.txt stops.txt
  # TODO: Check that the line is in expected format
  # Needed in order to get rid of shape_travelled
  cut --complement -f 9 -d, stop_times.txt > stop_times.new
  mv stop_times.new stop_times.txt
  # TODO: Get stop positions from jore data
  # TODO: make shapes nicer
  #./fix_stops_accessibility.py > stops.new
  #mv stops.new stops.txt
  zip -f hsl.zip stop_times.txt stops.txt
  rm stop_times.txt
  rm stops.txt

  $FIT_GTFS finland-latest.osm.pbf +init=epsg:3067 hsl.zip hsl_fitted.zip 2>&1 | tee hsl.fit.log.txt
  mv hsl_fitted.zip hsl.zip
  add_feed_id hsl.zip HSL
  cp hsl.zip ${ROOT}/hsl/hsl.zip
}

function retrieveKoontikanta() {
  echo "Retrieving Koontikanta data..."
  cd ${ROOT}/finland

  curl -sS -u "$MATKA_PASS" "{{route_server_data_matka}}" -o matka.zip

  rm -rf GTFS
  mkdir -p GTFS

  transformKoontikantaPart "java -server -Xmx8G -jar $OBA_GTFS --transform=${ROOT}/rules/matka.rule matka.zip GTFS/matka.tmp"
  # rename id's as a separate pass to avoid nondeterminism
  transformKoontikantaPart "java -server -Xmx8G -jar $OBA_GTFS --transform=${ROOT}/rules/matka-id.rule GTFS/matka.tmp GTFS/matka"
  sed -i -e '1 a''MATKA,matka.fi,http://www.matka.fi/,Europe/Helsinki,' GTFS/matka/agency.txt

  cd GTFS/matka
  zip ../../matka.filtered.zip *
  cd ../..

  mv matka.filtered.zip matka.zip

  add_feed_id matka.zip MATKA
}

# One Bus away transform does not end terminate with a correct error code. Check that here and fail if configuration is set
function transformKoontikantaPart() {
  if (! $1 2>&1) | grep "Exception"
  then
    echo "Failed to transform koontikanta part"
    {% if route_server_fail_build_on_data_error %}
      exit 1
    {% endif %}
  fi
}

function buildOtpGraphFinland() {
  echo "Building OTP graph..."
  cd $ROOT
  cp {{otp_root}}/build-config.json ${ROOT}/finland/build-config.json
  java -Xmx8G -jar $OTP_JAR --build finland/ 2>&1 | tee ${ROOT}/finland/Graph.build.log.txt
}

function buildOtpGraphHSL() {
  echo "Building OTP graph..."
  cd $ROOT
  cp {{otp_root}}/build-config.json ${ROOT}/hsl/build-config.json
  java -Xmx8G -jar $OTP_JAR --build hsl/ 2>&1 | tee ${ROOT}/hsl/Graph.build.log.txt
}

#add (or modify) feed_info.txt that contains the feed_id
function add_feed_id() {
  set +o pipefail
  filename=$1
  id=$2

  contains_fileinfo=`unzip -l $filename|grep feed_info.txt|wc -l`

  if [ "$contains_fileinfo" -ne "1" ]; then
     echo "creating new feed-info"
     #no feed info available in zip, write whole file
     cat <<EOT > feed_info.txt
feed_publisher_name,feed_publisher_url,feed_lang,feed_id
$id-fake-name,$id-fake-url,$id-fake-lang,$id
EOT
  else
     unzip -o $filename feed_info.txt
     #see if if feed_id is already there
     count=`grep feed_id feed_info.txt|wc -l`
     if [ "$count" -ne "1" ]; then
       echo "adding feed_id column"
       #no feed_id in feed_info.txt, append
       awk -vc="feed_id" -vd="$id" 'NR==1{$0=c","$0}NR!=1{$0=d","$0}1' feed_info.txt > feed_info_new.txt
       #todo rename
     else
       echo "chaning existing id"
       #existing feed_id, replace it
       original=`awk -F ',' 'NR==1 {for (i=1; i<=NF; i++) {ix[$i] = i}}NR>1 {printf "%s\n", $ix["feed_id"]}' c1=feed_id feed_info.txt`       echo "chaning existing id $original to $id"
       cat feed_info.txt | sed s/$original/$id/g > feed_info_new.txt
     fi
     mv feed_info_new.txt feed_info.txt
  fi

  # add feed_info to zip
  zip -u $filename feed_info.txt
  set -o pipefail
}

# Here we go
retrieveOSMFinland
retrieveOSMHSL
retrieveTampere
retrieveJyvaskyla
retrieveOulu
retrieveLauttaNet
retrieveHsl
retrieveKoontikanta
buildOtpGraphFinland
buildOtpGraphHSL

# Move hsl folder into root folder for web server
mv ${ROOT}/hsl ${ROOT}/finland/
